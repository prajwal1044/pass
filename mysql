# Import necessary libraries
import streamlit as st
import mysql.connector

# Connect to MySQL Database
db = mysql.connector.connect(
    host="localhost",
    user="your_username",
    password="your_password",
    database="your_database"
)
cursor = db.cursor(dictionary=True)

# Define CRUD operations
def create_student(student_name, student_id, email, grade):
    sql = "INSERT INTO students (student_name, student_id, email, grade) VALUES (%s, %s, %s, %s)"
    values = (student_name, student_id, email, grade)
    cursor.execute(sql, values)
    db.commit()

def read_students():
    cursor.execute("SELECT * FROM students")
    return cursor.fetchall()

def update_student(student_id, new_student_name, new_email, new_grade):
    sql = "UPDATE students SET student_name = %s, email = %s, grade = %s WHERE student_id = %s"
    values = (new_student_name, new_email, new_grade, student_id)
    cursor.execute(sql, values)
    db.commit()

def delete_student(student_id):
    sql = "DELETE FROM students WHERE student_id = %s"
    values = (student_id,)
    cursor.execute(sql, values)
    db.commit()

# Streamlit UI
def main():
    st.title('MySQL CRUD Operations with Streamlit')

    # Create
    st.subheader('Create Student')
    student_name = st.text_input('Student Name')
    student_id = st.text_input('Student ID')
    email = st.text_input('Email')
    grade = st.text_input('Grade')
    if st.button('Add Student'):
        create_student(student_name, student_id, email, grade)
        st.success('Student added successfully!')

    # Read
    st.subheader('Read Students')
    students = read_students()
    for student in students:
        st.write(f"Name: {student['student_name']}, ID: {student['student_id']}, Email: {student['email']}, Grade: {student['grade']}")

    # Update
    st.subheader('Update Student')
    update_id = st.text_input('Student ID to update')
    new_name = st.text_input('New Name')
    new_email = st.text_input('New Email')
    new_grade = st.text_input('New Grade')
    if st.button('Update Student'):
        update_student(update_id, new_name, new_email, new_grade)
        st.success('Student updated successfully!')

    # Delete
    st.subheader('Delete Student')
    delete_id = st.text_input('Student ID to delete')
    if st.button('Delete Student'):
        delete_student(delete_id)
        st.success('Student deleted successfully!')

if _name_ == '_main_':
    main()
